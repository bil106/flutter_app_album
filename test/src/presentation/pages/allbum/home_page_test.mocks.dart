// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_app/test/src/presentation/pages/allbum/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bloc/bloc.dart' as _i5;
import 'package:flutter/src/widgets/navigator.dart' as _i8;
import 'package:flutter_app/src/common/http/api_client.dart' as _i3;
import 'package:flutter_app/src/data/repositories/albums_repo.dart' as _i6;
import 'package:flutter_app/src/domain/models/album.dart' as _i7;
import 'package:flutter_app/src/presentation/pages/allbum/albums_bloc.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAlbumsState_0 extends _i1.SmartFake implements _i2.AlbumsState {
  _FakeAlbumsState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiClient_1 extends _i1.SmartFake implements _i3.ApiClient {
  _FakeApiClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AlbumsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlbumsBloc extends _i1.Mock implements _i2.AlbumsBloc {
  MockAlbumsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AlbumsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAlbumsState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AlbumsState);
  @override
  _i4.Stream<_i2.AlbumsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.AlbumsState>.empty(),
      ) as _i4.Stream<_i2.AlbumsState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  dynamic onAlbumsLoading(
    _i2.AlbumsBlocLoadAllEvent? event,
    _i5.Emitter<_i2.AlbumsState>? emit,
  ) =>
      super.noSuchMethod(Invocation.method(
        #onAlbumsLoading,
        [
          event,
          emit,
        ],
      ));
  @override
  dynamic onAlbumsFiltering(
    _i2.AlbumsBlocFilterByTitleEvent? event,
    _i5.Emitter<_i2.AlbumsState>? emit,
  ) =>
      super.noSuchMethod(Invocation.method(
        #onAlbumsFiltering,
        [
          event,
          emit,
        ],
      ));
  @override
  void add(_i2.AlbumsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i2.AlbumsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i2.AlbumsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i2.AlbumsEvent>(
    _i5.EventHandler<E, _i2.AlbumsState>? handler, {
    _i5.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i5.Transition<_i2.AlbumsEvent, _i2.AlbumsState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  void onChange(_i5.Change<_i2.AlbumsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AlbumsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlbumsRepository extends _i1.Mock implements _i6.AlbumsRepository {
  MockAlbumsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ApiClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeApiClient_1(
          this,
          Invocation.getter(#client),
        ),
      ) as _i3.ApiClient);
  @override
  _i4.Future<List<_i7.AlbumData>> getAlbums() => (super.noSuchMethod(
        Invocation.method(
          #getAlbums,
          [],
        ),
        returnValue: _i4.Future<List<_i7.AlbumData>>.value(<_i7.AlbumData>[]),
      ) as _i4.Future<List<_i7.AlbumData>>);
  @override
  _i4.Future<List<_i7.AlbumData>> getAlbumsByTitle(String? title) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlbumsByTitle,
          [title],
        ),
        returnValue: _i4.Future<List<_i7.AlbumData>>.value(<_i7.AlbumData>[]),
      ) as _i4.Future<List<_i7.AlbumData>>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i8.NavigatorObserver {
  @override
  void didPush(
    _i8.Route<dynamic>? route,
    _i8.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didPop(
    _i8.Route<dynamic>? route,
    _i8.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didRemove(
    _i8.Route<dynamic>? route,
    _i8.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didReplace({
    _i8.Route<dynamic>? newRoute,
    _i8.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStartUserGesture(
    _i8.Route<dynamic>? route,
    _i8.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
